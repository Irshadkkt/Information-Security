def encrypt(key, message):
    # Function to encrypt the message using a Caesar cipher
    encrypted_message = ''  # Initialize an empty string to store the encrypted message
    for char in message:
        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter
            encrypted_char = chr((ord(char) - ord('a') + key) % 26 + ord('a'))  # Encrypt the lowercase letter
        elif 'A' <= char <= 'Z':  # Check if the character is an uppercase letter
            encrypted_char = chr((ord(char) - ord('A') + key) % 26 + ord('A'))  # Encrypt the uppercase letter
        else:
            encrypted_char = char  # If the character is not a letter, leave it unchanged
        encrypted_message += encrypted_char  # Append the encrypted character to the encrypted message
    return encrypted_message  # Return the encrypted message


def decrypt(key, message):
    # Function to decrypt the message using a Caesar cipher
    decrypted_message = ''  # Initialize an empty string to store the decrypted message
    for char in message:
        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter
            decrypted_char = chr((ord(char) - ord('a') - key) % 26 + ord('a'))  # Decrypt the lowercase letter
        elif 'A' <= char <= 'Z':  # Check if the character is an uppercase letter
            decrypted_char = chr((ord(char) - ord('A') - key) % 26 + ord('A'))  # Decrypt the uppercase letter
        else:
            decrypted_char = char  # If the character is not a letter, leave it unchanged
        decrypted_message += decrypted_char  # Append the decrypted character to the decrypted message
    return decrypted_message  # Return the decrypted message


def brute_force_decrypt(message):
    # Function to perform brute-force decryption of the message
    for key in range(1, 26):  # Iterate over all possible keys (1 to 25)
        decrypted_message = decrypt(key, message)  # Decrypt the message using the current key
        print(f"Key: {key}, Decrypted message: {decrypted_message}")  # Print the decrypted message


def main_menu():
    # Function to display the main menu
    print("\nMain Menu:")
    print("1. Encrypt message")
    print("2. Decrypt message")
    print("3. Brute-force decryption")
    print("4. Exit")


def main():
    # Main function to get user input and execute the program
    while True:
        main_menu()  # Display the main menu
        choice = input("Enter your choice (1-4): ")  # Get user choice
        if choice == '1':  # Encrypt message
            message = input('Enter the message: ')  # Get the message from the user
            key = int(input('Enter the key value (a number between 1 and 25): '))  # Get the key value from the user
            while not 1 <= key <= 25:  # Validate the key value
                print("Invalid key value. Please enter a number between 1 and 25.")
                key = int(input('Enter the key value (a number between 1 and 25): '))
            encrypted_message = encrypt(key, message)  # Encrypt the message using the specified key
            print(f"Encrypted message: {encrypted_message}")  # Print the encrypted message
        elif choice == '2':  # Decrypt message
            message = input('Enter the message: ')  # Get the encrypted message from the user
            key = int(input('Enter the key value (a number between 1 and 25): '))  # Get the key value from the user
            while not 1 <= key <= 25:  # Validate the key value
                print("Invalid key value. Please enter a number between 1 and 25.")
                key = int(input('Enter the key value (a number between 1 and 25): '))
            decrypted_message = decrypt(key, message)  # Decrypt the message using the specified key
            print(f"Decrypted message: {decrypted_message}")  # Print the decrypted message
        elif choice == '3':  # Brute-force decryption
            message = input('Enter the encrypted message: ')  # Get the encrypted message from the user
            brute_force_decrypt(message)  # Perform brute-force decryption
        elif choice == '4':  # Exit
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")


if __name__ == "__main__":
    main()  # Execute the main function
