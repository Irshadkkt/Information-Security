# -*- coding: utf-8 -*-
"""
Created on Mon May 13 01:32:57 2024

@author: Irshad
"""

def caesar_substitution_encrypt(plaintext, shift):
    ciphertext = ''
    for char in plaintext:
        if char.isalpha():
            if char.islower():
                ciphertext += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                ciphertext += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
        else:
            ciphertext += char
    return ciphertext

def caesar_substitution_decrypt(ciphertext, shift):
    plaintext = ''
    for char in ciphertext:
        if char.isalpha():
            if char.islower():
                plaintext += chr((ord(char) - ord('a') - shift) % 26 + ord('a'))
            else:
                plaintext += chr((ord(char) - ord('A') - shift) % 26 + ord('A'))
        else:
            plaintext += char
    return plaintext


def rail_fence_transposition_encrypt(text, key):
 

    rail = [['\n' for i in range(len(text))]
                for j in range(key)]
     

    dir_down = False
    row, col = 0, 0
     
    for i in range(len(text)):
        if (row == 0) or (row == key - 1):
            dir_down = not dir_down
        rail[row][col] = text[i]
        col += 1
        if dir_down:
            row += 1
        else:
            row -= 1
    result = []
    for i in range(key):
        for j in range(len(text)):
            if rail[i][j] != '\n':
                result.append(rail[i][j])
    return("" . join(result))
     
def rail_fence_transposition_decrypt(cipher, key):
 
    rail = [['\n' for i in range(len(cipher))]
                for j in range(key)]
     
    dir_down = None
    row, col = 0, 0
    for i in range(len(cipher)):
        if row == 0:
            dir_down = True
        if row == key - 1:
            dir_down = False
        rail[row][col] = '*'
        col += 1
        if dir_down:
            row += 1
        else:
            row -= 1
    index = 0
    for i in range(key):
        for j in range(len(cipher)):
            if ((rail[i][j] == '*') and
            (index < len(cipher))):
                rail[i][j] = cipher[index]
                index += 1
         
    result = []
    row, col = 0, 0
    for i in range(len(cipher)):
        if row == 0:
            dir_down = True
        if row == key-1:
            dir_down = False
             
        if (rail[row][col] != '*'):
            result.append(rail[row][col])
            col += 1

        if dir_down:
            row += 1
        else:
            row -= 1
    return("".join(result))


def product_cipher_encrypt(plaintext, caesar_shift, rail_fence_rails):
    intermediate_text = caesar_substitution_encrypt(plaintext, caesar_shift)
    
    ciphertext = rail_fence_transposition_encrypt(intermediate_text, rail_fence_rails)
    
    return ciphertext

def product_cipher_decrypt(ciphertext, caesar_shift, rail_fence_rails):
    intermediate_text = rail_fence_transposition_decrypt(ciphertext, rail_fence_rails)
    plaintext = caesar_substitution_decrypt(intermediate_text, caesar_shift)
    
    return plaintext


def encrypt():
    plaintext = input("Enter Plain text for performing Product Cipher  :- ")
    caesar_shift = int(input("Enter shift key for Substitution caesar_cipher :- "))
    rail_fence_rails = int(input("Enter Rail_fence key for Transposition Rail_fence :- "))
    encrypted_text = product_cipher_encrypt(plaintext, caesar_shift, rail_fence_rails)
    print("Encrypted text:", encrypted_text)

def decrypt():
    encrypted_text = input("Enter Plain text for performing Product Cipher  :- ")
    caesar_shift = int(input("Enter shift key for Substitution caesar_cipher :- "))
    rail_fence_rails = int(input("Enter Rail_fence key for Transposition Rail_fence :- "))
    decrypted_text = product_cipher_decrypt(encrypted_text, caesar_shift, rail_fence_rails)
    print("Decrypted text:", decrypted_text)

def main():
    m=0
    while m!=3:
        print("\n1.Encrypt\n2.Decrypt\n3.Exit ")
        m = input("Enter choice :")
        if m=='1':
            encrypt()
        elif m=='2':
            decrypt()
        elif m=='3':
            print("Exiting...")
            break
        else:
            print("Enter valid choice !!")



main()

